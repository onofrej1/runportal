// https://vertabelo.com/blog/a-dating-app-data-model/

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * model Question {
 * id            Int     @id @default(autoincrement())
 * name          String
 * title         String
 * text          String?
 * type          String
 * isRequired    Boolean @default(false)
 * allowMultiple Boolean @default(false)
 * category      String
 * order         Int     @default(0)
 * questionChoices QuestionChoice[]
 * eventInfo       EventInfo[]
 * userPreferences UserPreferences[]
 * }
 * model QuestionChoice {
 * id           Int      @id @default(autoincrement())
 * title        String
 * questionId   Int
 * question     Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
 * displayOrder Int
 * eventInfo       EventInfo[]
 * userPreferences UserPreferences[]
 * }
 * model EventInfo {
 * id               Int             @id @default(autoincrement())
 * eventId          Int
 * event            Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
 * questionId       Int
 * question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
 * questionChoiceId Int?
 * questionChoice   QuestionChoice? @relation(fields: [questionChoiceId], references: [id], onDelete: Cascade)
 * weight           Int             @default(0)
 * value            String?
 * //@@unique([userId, questionId], name: "questionIdentifier")
 * }
 */

/**
 * model UserPreferences {
 * id               Int             @id @default(autoincrement())
 * userId           String
 * user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
 * questionId       Int
 * question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
 * questionChoiceId Int?
 * questionChoice   QuestionChoice? @relation(fields: [questionChoiceId], references: [id], onDelete: Cascade)
 * weight           Int             @default(0)
 * value            String?
 * }
 */

/**
 * enum Region {
 * KE
 * BA
 * BB
 * PO
 * NR
 * TC
 * TV
 * ZA
 * }
 */

model User {
  id            String    @id
  name          String
  //nickname      String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  gender        String?
  dob           DateTime?
  bio           String?   @db.Text()
  lastLogin     DateTime?
  sessions      Session[]
  accounts      Account[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  posts            Post[]
  comments         Comment[]
  likes            Like[]
  media            Media[]
  galleries        Gallery[]
  mediaComments    MediaComment[]
  events           Event[]
  eventAttachments EventAttachment[]
  //attendees        Attendee[]
  registrations    Registration[]
  runResults       RunResult[]
  //userPreferences  UserPreferences[]

  @@unique([email])
  @@map("user")
}

model Post {
  id              Int        @id @default(autoincrement())
  title           String
  content         String     @db.Text
  summary         String?    @db.Text
  cover           String?    @db.Text
  slug            String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  enableComments  Boolean    @default(true)
  status          PostStatus @default(DRAFT)
  publishedAt     DateTime?
  metaTitle       String?
  views           Int        @default(0)
  metaDescription String?
  author          User       @relation(fields: [authorId], references: [id])
  authorId        String
  categories      Category[]
  tags            Tag[]
  comments        Comment[]
  likes           Like[]
  galleries       Gallery[]
  // published       Boolean   @default(false)
  // metaKeywords String?
}

enum PostStatus {
  DRAFT
  PUBLISHED
}

model Comment {
  id          Int           @id @default(autoincrement())
  comment     String        @db.Text
  status      CommentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  publishedAt DateTime      @default(now())
  editedAt    DateTime?
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  post        Post?         @relation(fields: [postId], references: [id])
  postId      Int?
  parent      Comment?      @relation("parent", fields: [parentId], references: [id])
  parentId    Int?
  comments    Comment[]     @relation("parent")
  likes       Like[]
}

enum CommentStatus {
  PENDING
  APPROVED
  SPAM
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post?    @relation(fields: [postId], references: [id])
  postId    Int?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
}

model Tag {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  slug        String?
  posts       Post[]
}

model Category {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  slug        String?
  posts       Post[]
}

model Media {
  id          Int            @id @default(autoincrement())
  name        String
  description String         @db.Text
  file        String         @db.Text
  size        Int
  orientation Orientation?
  likes       Int            @default(0)
  views       Int            @default(0)
  downloads   Int            @default(0)
  createdAt   DateTime       @default(now())
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  category    MediaCategory  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  mediaType   MediaType      @relation(fields: [mediaTypeId], references: [id])
  mediaTypeId Int
  gallery     Gallery        @relation(fields: [galleryId], references: [id])
  galleryId   Int
  comments    MediaComment[]
}

model Gallery {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  views       Int      @default(0)
  downloads   Int      @default(0)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  event       Event?   @relation(fields: [eventId], references: [id])
  eventId     Int?
  post        Post?    @relation(fields: [postId], references: [id])
  postId      Int?
  media       Media[]
}

model MediaComment {
  id          Int           @id @default(autoincrement())
  comment     String        @db.Text
  status      CommentStatus @default(PENDING)
  publishedAt DateTime      @default(now())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  media       Media?        @relation(fields: [mediaId], references: [id])
  mediaId     Int?
}

model MediaType {
  id    Int     @id @default(autoincrement())
  name  String
  slug  String
  media Media[]
}

model MediaCategory {
  id      Int     @id @default(autoincrement())
  name    String
  details String? @db.Text
  media   Media[]
}

model Event {
  id             Int               @id @default(autoincrement())
  name           String
  description    String?           @db.Text
  color          String?
  status         String?
  contact        String?
  //maxAttendees   Int?
  onlineLink     String?
  eventUrl       String?
  startDate      DateTime
  endDate        DateTime
  allDay         Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  createdBy      User              @relation(fields: [createdById], references: [id])
  createdById    String
  location       Location?         @relation(fields: [locationId], references: [id])
  locationId     Int?
  eventSchedules EventSchedule[]
  //attendees      Attendee[]
  organizer      Organizer?        @relation(fields: [organizerId], references: [id])
  organizerId    Int?
  eventType      EventType         @relation(fields: [eventTypeId], references: [id])
  eventTypeId    Int
  runs           Run[]
  attachments    EventAttachment[]
  galleries      Gallery[]
  //eventInfo      EventInfo[]
}

model EventType {
  id    Int     @id @default(autoincrement())
  type  String
  event Event[]
}

model EventAttachment {
  id           Int     @id @default(autoincrement())
  fileName     String
  fileTitle    String?
  fileType     String
  fileUrl      String
  event        Event   @relation(fields: [eventId], references: [id])
  eventId      Int
  uploadedBy   User    @relation(fields: [uploadedById], references: [id])
  uploadedById String
}

model Organizer {
  id     Int     @id @default(autoincrement())
  name   String
  events Event[]
}

model Location {
  id         Int           @id @default(autoincrement())
  location   String
  place      String?
  lat        String?
  lot        String?
  district   District      @relation(fields: [districtId], references: [id])
  districtId Int
  type       LocationType?
  events     Event[]
}

model District {
  id        Int        @id @default(autoincrement())
  code      String?
  district  String
  region    Region     @relation(fields: [regionId], references: [id])
  regionId  Int
  locations Location[]
}

model Region {
  id        Int        @id @default(autoincrement())
  region    String
  code      String?
  districts District[]
}

enum LocationType {
  CITY
  VILLAGE
}

/**
 * model Attendee {
 * id      Int     @id @default(autoincrement())
 * user    User    @relation(fields: [userId], references: [id])
 * userId  String
 * event   Event   @relation(fields: [eventId], references: [id])
 * eventId Int
 * status  String?
 * }
 */

model EventSchedule {
  id        Int      @id @default(autoincrement())
  activity  String
  location  String?
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
}

model Run {
  id              Int            @id @default(autoincrement())
  title           String
  distance        Int
  elevation       Int?
  surface         String?
  maxAttendees    Int?
  tshirt          Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  registerEndDate DateTime
  event           Event          @relation(fields: [eventId], references: [id])
  eventId         Int
  registrations   Registration[]
  runResults      RunResult[]
  runCategories   RunCategory[]
  runEntryFees    RunEntryFee[]
}

model RunEntryFee {
  id           Int      @id @default(autoincrement())
  registerDate DateTime
  entryFee     Int
  details      String?
  run          Run      @relation(fields: [runId], references: [id])
  runId        Int
}

model RunCategory {
  id            Int            @id @default(autoincrement())
  category      String
  title         String
  runs          Run[]
  registrations Registration[]
}

model Registration {
  id          Int          @id @default(autoincrement())
  createdAt   DateTime     @default(now())
  firstName   String
  lastName    String
  gender      Gender
  //category    String?
  category    RunCategory? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  dateOfBirth DateTime
  email       String
  nation      String
  city        String?
  club        String?
  phone       String?
  presented   Boolean      @default(false)
  paid        Boolean      @default(false)
  tshirtSize  TshirtSize?
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?
  run         Run          @relation(fields: [runId], references: [id])
  runId       Int
}

model RunResult {
  id          Int     @id @default(autoincrement())
  rank        Int
  bib         Int
  name        String
  category    String
  gender      Gender
  yearOfBirth Int
  club        String
  time        Int
  user        User?   @relation(fields: [userId], references: [id])
  userId      String?
  run         Run     @relation(fields: [runId], references: [id])
  runId       Int
}

enum Orientation {
  VERTICAL
  HORIZONTAL
  SQUARE
}

enum TshirtSize {
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  MALE
  FEMALE
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
